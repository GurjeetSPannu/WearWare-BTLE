<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\adc.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\adc.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5040049: Last Updated: Fri Aug 15 12:45:46 2014
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[d]">BLE_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">BLE_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_IRQHandler</a> from adc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[d]">BLE_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[23]">CALIB_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[b]">COMPARATOR0_IRQHandler</a> from analog.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[c]">COMPARATOR1_IRQHandler</a> from analog.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[12]">DMA_IRQHandler</a> from dma.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIO_IRQHandler</a> from gpio.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1b]">I2C_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[f]">OSC_EN_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[21]">PWM0_IRQHandler</a> from pwm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[22]">PWM1_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[e]">RTC_CAP_IRQHandler</a> from rtc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from rtc.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[16]">SPI0_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[15]">SPI0_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1a]">SPI1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[19]">SPI1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1c]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1d]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1e]">TIMER2_IRQHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[1f]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[24]">TUNER_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">TUNER_SETTING_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[25]">TUNER_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[14]">UART0_RX_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[13]">UART0_TX_IRQHandler</a> from uart.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[18]">UART1_RX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">UART1_TX_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[20]">WDT_IRQHandler</a> from startup.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[28]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup.o(.text)
 <LI><a href="#[29]">adc_offset_get_cb</a> from adc.o(.text) referenced from adc.o(.text)
 <LI><a href="#[2b]">adc_test_cb</a> from adc_example.o(.text) referenced from adc_example.o(.text)
 <LI><a href="#[2a]">clock_32k_correction_cb</a> from syscon.o(.text) referenced from syscon.o(.text)
 <LI><a href="#[2c]">fputc</a> from retarget.o(.text) referenced from printfa.o(i.__0printf)
 <LI><a href="#[27]">main</a> from adc_example.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[28]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[100]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[102]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[104]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[105]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[106]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[107]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[108]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>BLE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLE_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CALIB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>OSC_EN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SPI0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TUNER_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TUNER_SETTING_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TUNER_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>UART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>UART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[109]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[10b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[10c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[31]"></a>SystemInit</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SystemInit &rArr; plf_init &rArr; powerup_calibration &rArr; seq_calibration &rArr; rf_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemIOCfg
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_off
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clock_off
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clock_off
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>adc_clean_fifo</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_clean_fifo
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_GetSR
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>ADC_IRQHandler</STRONG> (Thumb, 272 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_IRQHandler &rArr; adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clean_fifo
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_GetSR
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_ClrSR
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC0WithMask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>adc_read</STRONG> (Thumb, 298 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = adc_read &rArr; adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clean_fifo
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_GetSR
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_offset_get
</UL>

<P><STRONG><a name="[47]"></a>adc_init</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = adc_init &rArr; __adc_calibrate &rArr; __adc_offset_get &rArr; adc_read &rArr; adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_cofig
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetADCCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>adc_buf_in_set</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
</UL>

<P><STRONG><a name="[49]"></a>adc_buf_gain_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
</UL>

<P><STRONG><a name="[4a]"></a>adc_compare_init</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
</UL>

<P><STRONG><a name="[4b]"></a>adc_decimation_enable</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, adc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
</UL>

<P><STRONG><a name="[4c]"></a>ADC_RESULT_mV</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_RESULT_mV
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b]"></a>COMPARATOR0_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMPARATOR0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>COMPARATOR1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = COMPARATOR1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>comparator_init</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, analog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetAnalogCRWithMask
</UL>

<P><STRONG><a name="[52]"></a>comparator_enable</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, analog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetAnalogCRWithMask
</UL>

<P><STRONG><a name="[53]"></a>battery_monitor_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = battery_monitor_enable &rArr; syscon_SetAnalogCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetAnalogCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[54]"></a>brown_out_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, analog.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetAnalogCRWithMask
</UL>

<P><STRONG><a name="[55]"></a>temp_sensor_enable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = temp_sensor_enable &rArr; syscon_SetAnalogCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetAnalogCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12]"></a>DMA_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_ClrIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>dma_init</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
</UL>

<P><STRONG><a name="[10d]"></a>dma_check_status</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>dma_abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_allow_sleep
</UL>

<P><STRONG><a name="[5b]"></a>dma_memory_copy</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
</UL>

<P><STRONG><a name="[60]"></a>dma_tx</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
</UL>

<P><STRONG><a name="[61]"></a>dma_rx</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
</UL>

<P><STRONG><a name="[62]"></a>dma_transfer</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_prevent_sleep
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetDST
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetSRC
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_dma_SetCRWithMask
</UL>

<P><STRONG><a name="[a]"></a>GPIO_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>gpio_init</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>gpio_read_pin</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>gpio_write_pin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutputData
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off
</UL>

<P><STRONG><a name="[65]"></a>gpio_set_direction</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_ClrOutEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
</UL>

<P><STRONG><a name="[72]"></a>gpio_read_pin_field</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_sleep_allowed
</UL>

<P><STRONG><a name="[68]"></a>gpio_write_pin_field</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutputData
</UL>

<P><STRONG><a name="[69]"></a>gpio_set_direction_field</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_ClrOutEnable
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutEnable
</UL>

<P><STRONG><a name="[6a]"></a>gpio_toggle_pin</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetOutputData
</UL>

<P><STRONG><a name="[6b]"></a>gpio_set_interrupt</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntFallingEdge
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntRisingEdge
</UL>

<P><STRONG><a name="[110]"></a>gpio_enable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>gpio_disable_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>gpio_pull_set</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctz
</UL>

<P><STRONG><a name="[70]"></a>gpio_wakeup_config</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntFallingEdge
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_gpio_SetIntRisingEdge
</UL>

<P><STRONG><a name="[71]"></a>gpio_sleep_allowed</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read_pin_field
</UL>

<P><STRONG><a name="[21]"></a>PWM0_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, pwm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>pwm_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_SetCRWithMask
</UL>

<P><STRONG><a name="[75]"></a>pwm_config</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_pwm_SetCRWithMask
</UL>

<P><STRONG><a name="[76]"></a>dec2bcd</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[112]"></a>bcd2dec</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>rtc_time_get</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rtc_time_get &rArr; rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = RTC_IRQHandler &rArr; rtc_time_get &rArr; rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RTC_CAP_IRQHandler</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_CAP_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>rtc_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>rtc_calibration</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_calibration &rArr; rtc_rtc_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_cb
</UL>

<P><STRONG><a name="[7f]"></a>rtc_correction</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_SetCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[81]"></a>rtc_capture_enable</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_ClrSR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_SetCRWithMask
</UL>

<P><STRONG><a name="[83]"></a>rtc_capture_disable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_SetCRWithMask
</UL>

<P><STRONG><a name="[84]"></a>rtc_time_set</STRONG> (Thumb, 154 bytes, Stack size 80 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_GetSR
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_rtc_SetCRWithMask
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[35]"></a>syscon_set_sysclk_src</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = syscon_set_sysclk_src &rArr; syscon_SetPGCR1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[36]"></a>syscon_set_ahb_clk</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_ahb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_init
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[89]"></a>syscon_get_ahb_clk</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[37]"></a>syscon_set_apb_clk</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_apb_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[8a]"></a>syscon_get_apb_clk</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[39]"></a>syscon_set_timer_clk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_timer_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3a]"></a>syscon_set_usart_clk</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_usart_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[38]"></a>syscon_set_ble_clk</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = syscon_set_ble_clk &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[114]"></a>syscon_get_reset_cause</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, syscon.o(.text), UNUSED)

<P><STRONG><a name="[8b]"></a>syscon_enable_transceiver</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
</UL>

<P><STRONG><a name="[8e]"></a>clock_32k_correction_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[8f]"></a>clock_32k_correction_enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_calibration_cb
</UL>

<P><STRONG><a name="[2a]"></a>clock_32k_correction_cb</STRONG> (Thumb, 238 bytes, Stack size 24 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = clock_32k_correction_cb &rArr; rtc_calibration &rArr; rtc_rtc_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_calibration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> syscon.o(.text)
</UL>
<P><STRONG><a name="[92]"></a>rco_calibration_cb</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_enable
</UL>

<P><STRONG><a name="[93]"></a>timer_delay</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetTOPR
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCR
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCRWithMask
</UL>

<P><STRONG><a name="[1c]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIMER3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_GetIntFlag
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>timer_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_enable
</UL>

<P><STRONG><a name="[9c]"></a>timer_config</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetTOPR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCR
</UL>

<P><STRONG><a name="[9d]"></a>timer_pwm_config</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetTOPR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCR
</UL>

<P><STRONG><a name="[9e]"></a>timer_capture_config</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetTOPR
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCR
</UL>

<P><STRONG><a name="[13]"></a>UART0_TX_IRQHandler</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_TX_IRQHandler &rArr; uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART0_RX_IRQHandler</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_RX_IRQHandler &rArr; uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_ClrIntFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>uart_init</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_init
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ac]"></a>uart_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_data
</UL>

<P><STRONG><a name="[ad]"></a>uart_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_data
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>

<P><STRONG><a name="[ae]"></a>uart_printf</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
</UL>

<P><STRONG><a name="[af]"></a>uart_finish_transfers</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>

<P><STRONG><a name="[b0]"></a>uart_check_tx_free</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off
</UL>

<P><STRONG><a name="[b1]"></a>uart_flow_on</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1WithMask
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR0WithMask
</UL>

<P><STRONG><a name="[b4]"></a>uart_flow_off</STRONG> (Thumb, 264 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR1WithMask
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPMCR0WithMask
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>

<P><STRONG><a name="[b5]"></a>UartPutc</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[b6]"></a>UartGetc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[b7]"></a>uart_dump_register</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[2c]"></a>fputc</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, retarget.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; UartPutc
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[b9]"></a>fgetc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[ba]"></a>_ttywrch</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
</UL>

<P><STRONG><a name="[115]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>adc_io_config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, adc_example.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27]"></a>main</STRONG> (Thumb, 472 bytes, Stack size 72 bytes, adc_example.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_io_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_enable
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analog_pin_enable
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_sensor_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_enable
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RESULT_mV
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d9]"></a>__rd_ble_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_ble_wakeup
</UL>

<P><STRONG><a name="[117]"></a>__wr_ble_reg</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, math.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>__aeabi_lmul</STRONG> (Thumb, 166 bytes, Stack size 0 bytes, math.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RESULT_mV
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_uldivmod</STRONG> (Thumb, 256 bytes, Stack size 0 bytes, math.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[32]"></a>dc_dc_enable</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dc_dc_enable &rArr; syscon_SetIvrefX32WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[33]"></a>plf_init</STRONG> (Thumb, 728 bytes, Stack size 48 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = plf_init &rArr; powerup_calibration &rArr; seq_calibration &rArr; rf_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL4WithMask
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetXtalBuckWithMask
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetIvrefX32WithMask
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR2WithMask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d8]"></a>check_ble_wakeup</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lib.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rd_ble_reg
</UL>

<P><STRONG><a name="[c8]"></a>calibration_init</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = calibration_init &rArr; cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[ce]"></a>seq_calibration</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = seq_calibration &rArr; rf_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_freq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL4WithMask
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[d0]"></a>freq_hop_calibration</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = freq_hop_calibration &rArr; cal_cal_SetCAL0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[e0]"></a>ref_pll_calibration</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>

<P><STRONG><a name="[e1]"></a>rc_calibration</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>

<P><STRONG><a name="[e2]"></a>lo_calibration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>

<P><STRONG><a name="[e4]"></a>lo_kcal_calibration</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
</UL>

<P><STRONG><a name="[e5]"></a>pa_calibration</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_freq
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL4WithMask
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL3WithMask
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable
</UL>

<P><STRONG><a name="[e7]"></a>r_calibration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL3WithMask
</UL>

<P><STRONG><a name="[e8]"></a>ros_calibration</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL3WithMask
</UL>

<P><STRONG><a name="[d3]"></a>rco_calibration</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rco_calibration &rArr; cal_cal_SetCAL4WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_GetSR
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_ClrSR
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL4WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[d4]"></a>rf_enable_sw_set_freq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, qnrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rf_enable_sw_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetLO2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[dc]"></a>rf_set_freq</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, qnrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rf_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetLO2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
</UL>

<P><STRONG><a name="[d5]"></a>rf_enable</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, qnrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rf_enable &rArr; dp_dp_SetRegWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[118]"></a>rf_tx_power_level_set</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, qnrf.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>rf_tx_power_level_get</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, qnrf.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_get_apb_clk
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_get_ahb_clk
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_correction
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec2bcd
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[86]"></a>mktime</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mktime.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[11c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[85]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
</UL>

<P><STRONG><a name="[11e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c0]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c4]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[11f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[f5]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[120]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[121]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>localtime</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_parse
</UL>

<P><STRONG><a name="[eb]"></a>_localtime</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[122]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[f6]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[123]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[f2]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[f1]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f9]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[124]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[b8]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_dump_register
</UL>

<P><STRONG><a name="[125]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[126]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f7]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2d]"></a>uart_clock_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2f]"></a>spi_clock_off</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[30]"></a>timer_clock_off</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_clock_off
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[3b]"></a>SystemIOCfg</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[2e]"></a>syscon_SetCRSS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_clock_off
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_clock_off
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_clock_off
</UL>

<P><STRONG><a name="[34]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, system.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[46]"></a>syscon_SetADCCRWithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetADCCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_cofig
</UL>

<P><STRONG><a name="[3d]"></a>adc_adc_SetADC0WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_adc_SetADC0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_enable
</UL>

<P><STRONG><a name="[43]"></a>adc_adc_SetADC1WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adc_adc_SetADC1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_decimation_enable
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_compare_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_buf_gain_set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_buf_in_set
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_cofig
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_offset_get
</UL>

<P><STRONG><a name="[3c]"></a>adc_enable</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>adc_offset_get_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adc.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>__adc_offset_get</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __adc_offset_get &rArr; adc_read &rArr; adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_calibrate
</UL>

<P><STRONG><a name="[44]"></a>__adc_calibrate</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __adc_calibrate &rArr; __adc_offset_get &rArr; adc_read &rArr; adc_enable &rArr; adc_adc_SetADC0WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adc_offset_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[45]"></a>__adc_cofig</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __adc_cofig &rArr; adc_adc_SetADC1WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_adc_SetADC1WithMask
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetADCCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[40]"></a>adc_adc_ClrSR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>

<P><STRONG><a name="[3f]"></a>adc_adc_GetSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_clean_fifo
</UL>

<P><STRONG><a name="[51]"></a>syscon_SetAnalogCRWithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, analog.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetAnalogCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;temp_sensor_enable
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;brown_out_enable
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;battery_monitor_enable
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comparator_enable
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comparator_init
</UL>

<P><STRONG><a name="[50]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, analog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comparator_init
</UL>

<P><STRONG><a name="[4f]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, analog.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;comparator_init
</UL>

<P><STRONG><a name="[5f]"></a>dma_dma_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_copy
</UL>

<P><STRONG><a name="[59]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_init
</UL>

<P><STRONG><a name="[5c]"></a>dma_dma_SetSRC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_copy
</UL>

<P><STRONG><a name="[5d]"></a>dma_dma_SetDST</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_copy
</UL>

<P><STRONG><a name="[57]"></a>dma_dma_ClrIntStatus</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[5e]"></a>dev_prevent_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_tx
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_copy
</UL>

<P><STRONG><a name="[56]"></a>dev_allow_sleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dma.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_abort
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[67]"></a>gpio_gpio_SetOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
</UL>

<P><STRONG><a name="[66]"></a>gpio_gpio_ClrOutEnable</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction_field
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_direction
</UL>

<P><STRONG><a name="[6d]"></a>gpio_gpio_SetIntRisingEdge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_interrupt
</UL>

<P><STRONG><a name="[6c]"></a>gpio_gpio_SetIntFallingEdge</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_wakeup_config
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_interrupt
</UL>

<P><STRONG><a name="[64]"></a>gpio_gpio_SetOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_toggle_pin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin_field
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write_pin
</UL>

<P><STRONG><a name="[6f]"></a>ctz</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_pull_set
</UL>

<P><STRONG><a name="[74]"></a>pwm_pwm_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pwm.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_config
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwm_init
</UL>

<P><STRONG><a name="[7e]"></a>rtc_rtc_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtc_rtc_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_disable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_correction
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_calibration
</UL>

<P><STRONG><a name="[78]"></a>rtc_time_parse</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, rtc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rtc_time_parse &rArr; localtime &rArr; _localtime &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_get
</UL>

<P><STRONG><a name="[82]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, rtc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_enable
</UL>

<P><STRONG><a name="[7c]"></a>rtc_rtc_ClrSR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_enable
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CAP_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[7b]"></a>rtc_rtc_GetSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_time_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_disable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_capture_enable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_correction
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_calibration
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_CAP_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_init
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_usart_clk
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_timer_clk
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ble_clk
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_apb_clk
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_ahb_clk
</UL>

<P><STRONG><a name="[87]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_enable_transceiver
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_set_sysclk_src
</UL>

<P><STRONG><a name="[8c]"></a>syscon_SetCRSS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscon.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_cb
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_enable_transceiver
</UL>

<P><STRONG><a name="[8d]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscon.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_enable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_enable_transceiver
</UL>

<P><STRONG><a name="[91]"></a>timer_enable</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, syscon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_32k_correction_cb
</UL>

<P><STRONG><a name="[98]"></a>timer_timer_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
</UL>

<P><STRONG><a name="[9b]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[9a]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
</UL>

<P><STRONG><a name="[95]"></a>timer_timer_SetCR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_capture_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pwm_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
</UL>

<P><STRONG><a name="[99]"></a>timer_timer_ClrIntFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
</UL>

<P><STRONG><a name="[97]"></a>timer_timer_GetIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_IRQHandler
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
</UL>

<P><STRONG><a name="[94]"></a>timer_timer_SetTOPR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_capture_config
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pwm_config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
</UL>

<P><STRONG><a name="[96]"></a>timer_enable</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_timer_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_delay
</UL>

<P><STRONG><a name="[9f]"></a>timer_reset</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSS
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCRSC
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_capture_config
</UL>

<P><STRONG><a name="[a0]"></a>syscon_SetCRSS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_reset
</UL>

<P><STRONG><a name="[b2]"></a>syscon_SetPMCR0WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_on
</UL>

<P><STRONG><a name="[b3]"></a>syscon_SetPMCR1WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_on
</UL>

<P><STRONG><a name="[a2]"></a>uart_uart_SetCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_rx_int_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_tx_int_enable
</UL>

<P><STRONG><a name="[a1]"></a>uart_tx_int_enable</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_tx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
</UL>

<P><STRONG><a name="[a3]"></a>uart_transmit_data</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetTXD
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_write
</UL>

<P><STRONG><a name="[a6]"></a>uart_receive_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_GetIntFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[aa]"></a>syscon_SetCRSC</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[a5]"></a>uart_uart_SetTXD</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_data
</UL>

<P><STRONG><a name="[a7]"></a>uart_uart_ClrIntFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>uart_uart_GetIntFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartGetc
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartPutc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_flow_off
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_check_tx_free
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_finish_transfers
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_printf
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_TX_IRQHandler
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_data
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_transmit_data
</UL>

<P><STRONG><a name="[a8]"></a>uart_rx_int_enable</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart_rx_int_enable &rArr; uart_uart_SetCRWithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_uart_SetCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_read
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[bc]"></a>analog_pin_enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, adc_example.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = analog_pin_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b]"></a>adc_test_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adc_example.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> adc_example.o(.text)
</UL>
<P><STRONG><a name="[bd]"></a>uart_tx_enable</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, adc_example.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart_tx_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>syscon_SetCMDCRWithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[c6]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
</UL>

<P><STRONG><a name="[d6]"></a>syscon_SetPGCR2WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[c5]"></a>syscon_SetIvrefX32WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetIvrefX32WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dc_dc_enable
</UL>

<P><STRONG><a name="[d7]"></a>syscon_SetXtalBuckWithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetXtalBuckWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[cc]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[c9]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[ca]"></a>cal_cal_SetCAL1WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[cb]"></a>cal_cal_SetCAL3WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL3WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
</UL>

<P><STRONG><a name="[d1]"></a>cal_cal_SetCAL4WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL4WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[c7]"></a>powerup_calibration</STRONG> (Thumb, 348 bytes, Stack size 16 bytes, lib.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = powerup_calibration &rArr; seq_calibration &rArr; rf_set_freq &rArr; syscon_SetLO2WithMask
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable_sw_set_freq
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_calibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_hop_calibration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_GetBLESR
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL4WithMask
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL3WithMask
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL1WithMask
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cal_cal_SetCAL0WithMask
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_dp_SetRegWithMask
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetPGCR1WithMask
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscon_SetCMDCRWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[cf]"></a>delay</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[cd]"></a>syscon_GetBLESR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lib.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerup_calibration
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plf_init
</UL>

<P><STRONG><a name="[da]"></a>syscon_SetPGCR1WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetPGCR1WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
</UL>

<P><STRONG><a name="[db]"></a>cal_cal_SetCAL0WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL0WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_kcal_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_calibration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calibration
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ref_pll_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_hop_calibration
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibration_init
</UL>

<P><STRONG><a name="[e3]"></a>cal_cal_SetCAL1WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_kcal_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_calibration
</UL>

<P><STRONG><a name="[e6]"></a>cal_cal_SetCAL3WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibration.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros_calibration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_calibration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
</UL>

<P><STRONG><a name="[dd]"></a>cal_cal_SetCAL4WithMask</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, calibration.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cal_cal_SetCAL4WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_calibration
</UL>

<P><STRONG><a name="[df]"></a>cal_cal_ClrSR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros_calibration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_calibration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_kcal_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_calibration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_calibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_hop_calibration
</UL>

<P><STRONG><a name="[de]"></a>cal_cal_GetSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, calibration.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ros_calibration
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;r_calibration
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pa_calibration
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_kcal_calibration
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lo_calibration
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc_calibration
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seq_calibration
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rco_calibration
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freq_hop_calibration
</UL>

<P><STRONG><a name="[e9]"></a>syscon_SetLO2WithMask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, qnrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = syscon_SetLO2WithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_set_freq
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable_sw_set_freq
</UL>

<P><STRONG><a name="[ea]"></a>dp_dp_SetRegWithMask</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, qnrf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dp_dp_SetRegWithMask
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_enable
</UL>

<P><STRONG><a name="[fb]"></a>_fp_digits</STRONG> (Thumb, 316 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fa]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[ff]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[fe]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
